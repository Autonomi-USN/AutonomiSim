<?xml version="1.0"?>
<launch>
  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf" />
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_gazebo)/worlds/example_course.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false" />
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default="" />
  <!-- Start in a default namespace -->
  <arg name="namespace" default="usn_drone" />
  <!-- Do we lock the vessel to the world? -->
  <arg name="usn_drone_locked" default="false" />
  <!-- Start paused? -->
  <arg name="paused" default="false" />
  <!-- Acoustic pinger position(s) -->
  <arg name="pinger_params" default="$(find vrx_gazebo)/config/pinger.yaml" />

  <!-- Initial USV location and attitude-->
  <arg name="x" default="0" />
  <arg name="y" default="0" />
  <arg name="z" default="0" />
  <arg name="P" default="0" />
  <arg name="R" default="0" />
  <arg name="Y" default="0" />

  <!-- Allow user specified thruster configurations
       H = stern trusters on each hull
       T = H with a lateral thruster
       X = "holonomic" configuration -->
  <arg name="thrust_config" default="T" />

  <!-- Do we load the VRX sensor suite? -->
  <arg name="vrx_sensors_enabled" default="true" />

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world)" />
    <arg name="verbose" value="$(arg verbose)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="use_sim_time" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="extra_gazebo_args" value="$(arg extra_gazebo_args)" />
  </include>

  <!-- Load robot model -->
  <!-- Determine which model -->
  <arg name="h_config" value="$(eval int((thrust_config)=='H'))" />
  <arg name="t_config" value="$(eval int((thrust_config)=='T'))" />
  <arg name="x_config" value="$(eval int((thrust_config)=='X'))" />

  <!-- For now - can only use the T configuration! -->
  <arg if="$(arg t_config)" name="urdf" default="$(find usn_drone_gazebo)/urdf/usn_drone_gazebo.urdf.xacro" />

  <param name="$(arg namespace)/robot_description" command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg usn_drone_locked)
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=$(arg namespace) " />

  <!-- Spawn model in Gazebo -->
  <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" args="-x $(arg x) -y $(arg y) -z $(arg z)
              -R $(arg R) -P $(arg P) -Y $(arg Y)
              -urdf -param $(arg namespace)/robot_description -model usn_drone" />

  <!-- Pinger visualization -->
  <node name="pinger_visualization" pkg="vrx_gazebo" type="pinger_visualization.py" />
  <!-- include other nodes for convenience -->
  <include file="$(find usn_drone_gazebo)/launch/rviz_usn_drone.launch" />
  <include file="$(find usn_drone_gazebo)/launch/pointcloud_to_laserscan.launch" />
  <include file="$(find usn_drone_gazebo)/launch/localization.launch" />
  <node name="cmd_vel_to_thrust" pkg="usn_navigation" type="cmd_vel2.py" />
  <node name="set_heading" pkg="mpc" type="set_heading.py" output="screen"/>
  <node pkg="tf" type="static_transform_publisher" name="goal1" args="-5 10 0 0 0 0 1 /usn_drone/odom /-5_10 100"/>
  <node pkg="tf" type="static_transform_publisher" name="goal2" args="20 10 0 0 0 0 1 /usn_drone/odom /20_10 100"/>


  <node pkg="tf" type="static_transform_publisher" name="goal3" args="20 20 0 0 0 0 1 /usn_drone/odom /20_20 100"/>
  <node pkg="tf" type="static_transform_publisher" name="goal4" args="-20 35 0 0 0 0 1 /usn_drone/odom /-30_60 100"/>

</launch>